/**
 * @fileoverview A rule to disallow modifying variables that are declared using `const`
 * @author Toru Nagashima
 */

"use strict";

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 59bf38c3c2ab17628fc5e3609f3f02a295ac779f
//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
// Helpers
//------------------------------------------------------------------------------

const CONSTANT_BINDINGS = new Set(["const", "using", "await using"]);

//------------------------------------------------------------------------------
<<<<<<< HEAD
=======
=======
const astUtils = require("./utils/ast-utils");

//------------------------------------------------------------------------------
>>>>>>> eaf6588f6b5f2f9dd371d6c0dfdf23c94e13a6be
>>>>>>> 59bf38c3c2ab17628fc5e3609f3f02a295ac779f
// Rule Definition
//------------------------------------------------------------------------------

/** @type {import('../types').Rule.RuleModule} */
module.exports = {
	meta: {
		type: "problem",

		docs: {
<<<<<<< HEAD
			description:
				"Disallow reassigning `const`, `using`, and `await using` variables",
=======
<<<<<<< HEAD
			description:
				"Disallow reassigning `const`, `using`, and `await using` variables",
=======
			description: "Disallow reassigning `const` variables",
>>>>>>> eaf6588f6b5f2f9dd371d6c0dfdf23c94e13a6be
>>>>>>> 59bf38c3c2ab17628fc5e3609f3f02a295ac779f
			recommended: true,
			url: "https://eslint.org/docs/latest/rules/no-const-assign",
		},

		schema: [],

		messages: {
			const: "'{{name}}' is constant.",
		},
	},

	create(context) {
		const sourceCode = context.sourceCode;

		/**
		 * Finds and reports references that are non initializer and writable.
		 * @param {Variable} variable A variable to check.
		 * @returns {void}
		 */
		function checkVariable(variable) {
			astUtils
				.getModifyingReferences(variable.references)
				.forEach(reference => {
					context.report({
						node: reference.identifier,
						messageId: "const",
						data: { name: reference.identifier.name },
					});
				});
		}

		return {
			VariableDeclaration(node) {
<<<<<<< HEAD
				if (CONSTANT_BINDINGS.has(node.kind)) {
=======
<<<<<<< HEAD
				if (CONSTANT_BINDINGS.has(node.kind)) {
=======
				if (node.kind === "const") {
>>>>>>> eaf6588f6b5f2f9dd371d6c0dfdf23c94e13a6be
>>>>>>> 59bf38c3c2ab17628fc5e3609f3f02a295ac779f
					sourceCode
						.getDeclaredVariables(node)
						.forEach(checkVariable);
				}
			},
		};
	},
};
